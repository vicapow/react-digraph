{"version":3,"sources":["../../src/examples/graph.js"],"names":["styles","graph","height","width","NODE_KEY","EMPTY_TYPE","SPECIAL_TYPE","SPECIAL_CHILD_SUBTYPE","EMPTY_EDGE_TYPE","SPECIAL_EDGE_TYPE","sample","Graph","props","getViewNode","searchNode","nodeKey","i","getNodeIndex","state","nodes","onUpdateNode","viewNode","setState","onSelectNode","selected","onSelectEdge","viewEdge","onCreateNode","x","y","type","Math","random","id","length","title","push","onDeleteNode","splice","newEdges","edges","filter","edge","source","target","onCreateEdge","sourceViewNode","targetViewNode","onSwapEdge","getEdgeIndex","JSON","parse","stringify","onDeleteEdge","findIndex","node","searchEdge","NodeTypes","GraphConfig","NodeSubtypes","EdgeTypes","el","GraphView","Component","App","window","onload","ReactDOM","render","document","getElementById"],"mappings":"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","file":"graph.js","sourcesContent":["// Copyright (c) 2016 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/*\n  Example usage of GraphView component\n*/\n\nimport React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GraphView from '../components/graph-view.js'\nimport GraphConfig from './graph-config.js' // Configures node/edge types\n\nconst styles = {\n  graph: {\n    height: '100%',\n    width: '100%'\n  }\n};\n\nconst NODE_KEY = \"id\" // Key used to identify nodes\n\n// These keys are arbitrary (but must match the config)\n// However, GraphView renders text differently for empty types\n// so this has to be passed in if that behavior is desired.\nconst EMPTY_TYPE = \"empty\"; // Empty node type\nconst SPECIAL_TYPE = \"special\";\nconst SPECIAL_CHILD_SUBTYPE = \"specialChild\";\nconst EMPTY_EDGE_TYPE = \"emptyEdge\";\nconst SPECIAL_EDGE_TYPE = \"specialEdge\";\n\n// NOTE: Edges must have 'source' & 'target' attributes\n// In a more realistic use case, the graph would probably originate\n// elsewhere in the App or be generated from some other state upstream of this component.\nconst sample = {\n  \"nodes\": [\n    {\n      \"id\": 1,\n      \"title\": \"Node A\",\n      \"x\": 258.3976135253906,\n      \"y\": 331.9783248901367,\n      \"type\": SPECIAL_TYPE\n    },\n    {\n      \"id\": 2,\n      \"title\": \"Node B\",\n      \"x\": 593.9393920898438,\n      \"y\": 260.6060791015625,\n      \"type\": EMPTY_TYPE,\n      \"subtype\": SPECIAL_CHILD_SUBTYPE\n    },\n    {\n      \"id\": 3,\n      \"title\": \"Node C\",\n      \"x\": 237.5757598876953,\n      \"y\": 61.81818389892578,\n      \"type\": EMPTY_TYPE\n    },\n    {\n      \"id\": 4,\n      \"title\": \"Node C\",\n      \"x\": 600.5757598876953,\n      \"y\": 600.81818389892578,\n      \"type\": EMPTY_TYPE\n    }\n  ],\n  \"edges\": [\n    {\n      \"source\": 1,\n      \"target\": 2,\n      \"type\": SPECIAL_EDGE_TYPE\n    },\n    {\n      \"source\": 2,\n      \"target\": 4,\n      \"type\": EMPTY_EDGE_TYPE\n    }\n  ]\n}\n\nexport class Graph extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      graph: sample,\n      selected: {}\n    }\n  }\n\n  // Helper to find the index of a given node\n  getNodeIndex(searchNode) {\n    return this.state.graph.nodes.findIndex((node)=>{\n      return node[NODE_KEY] === searchNode[NODE_KEY]\n    })\n  }\n\n  // Helper to find the index of a given edge\n  getEdgeIndex(searchEdge) {\n    return this.state.graph.edges.findIndex((edge)=>{\n      return edge.source === searchEdge.source &&\n        edge.target === searchEdge.target\n    })\n  }\n\n  // Given a nodeKey, return the corresponding node\n  getViewNode = nodeKey => {\n    const searchNode = {};\n    searchNode[NODE_KEY] = nodeKey;\n    const i = this.getNodeIndex(searchNode);\n    return this.state.graph.nodes[i]\n  }\n\n  /*\n   * Handlers/Interaction\n   */\n\n  // Called by 'drag' handler, etc..\n  // to sync updates from D3 with the graph\n  onUpdateNode = viewNode => {\n    const graph = this.state.graph;\n    const i = this.getNodeIndex(viewNode);\n\n    graph.nodes[i] = viewNode;\n    this.setState({graph: graph});\n  }\n\n  // Node 'mouseUp' handler\n  onSelectNode = viewNode => {\n    // Deselect events will send Null viewNode\n    if (!!viewNode){\n      this.setState({selected: viewNode});\n    } else{\n      this.setState({selected: {}});\n    }\n  }\n\n  // Edge 'mouseUp' handler\n  onSelectEdge = viewEdge => {\n    this.setState({selected: viewEdge});\n  }\n\n  // Updates the graph with a new node\n  onCreateNode = (x,y) => {\n    const graph = this.state.graph;\n\n    // This is just an example - any sort of logic\n    // could be used here to determine node type\n    // There is also support for subtypes. (see 'sample' above)\n    // The subtype geometry will underlay the 'type' geometry for a node\n    const type = Math.random() < 0.25 ? SPECIAL_TYPE : EMPTY_TYPE;\n\n    const viewNode = {\n      id: this.state.graph.nodes.length + 1,\n      title: '',\n      type: type,\n      x: x,\n      y: y\n    }\n\n    graph.nodes.push(viewNode);\n    this.setState({graph: graph});\n  }\n\n  // Deletes a node from the graph\n  onDeleteNode = viewNode => {\n    const graph = this.state.graph;\n    const i = this.getNodeIndex(viewNode);\n    graph.nodes.splice(i, 1);\n\n    // Delete any connected edges\n    const newEdges = graph.edges.filter((edge, i)=>{\n      return  edge.source != viewNode[NODE_KEY] &&\n              edge.target != viewNode[NODE_KEY]\n    })\n\n    graph.edges = newEdges;\n\n    this.setState({graph: graph, selected: {}});\n  }\n\n  // Creates a new node between two edges\n  onCreateEdge = (sourceViewNode, targetViewNode) => {\n    const graph = this.state.graph;\n\n    // This is just an example - any sort of logic\n    // could be used here to determine edge type\n    const type = sourceViewNode.type === SPECIAL_TYPE ? SPECIAL_EDGE_TYPE : EMPTY_EDGE_TYPE;\n\n    const viewEdge = {\n      source: sourceViewNode[NODE_KEY],\n      target: targetViewNode[NODE_KEY],\n      type: type\n    }\n\n    // Only add the edge when the source node is not the same as the target\n    if (viewEdge.source !== viewEdge.target) {\n      graph.edges.push(viewEdge);\n      this.setState({graph: graph});\n    }\n  }\n\n  // Called when an edge is reattached to a different target.\n  onSwapEdge = (sourceViewNode, targetViewNode, viewEdge) => {\n    const graph = this.state.graph;\n    const i = this.getEdgeIndex(viewEdge);\n    const edge = JSON.parse(JSON.stringify(graph.edges[i]));\n\n    edge.source = sourceViewNode[NODE_KEY];\n    edge.target = targetViewNode[NODE_KEY];\n    graph.edges[i] = edge;\n\n    this.setState({graph: graph});\n  }\n\n  // Called when an edge is deleted\n  onDeleteEdge = viewEdge => {\n    const graph = this.state.graph;\n    const i = this.getEdgeIndex(viewEdge);\n    graph.edges.splice(i, 1);\n    this.setState({graph: graph, selected: {}});\n  }\n\n  /*\n   * Render\n   */\n\n  render() {\n    const nodes = this.state.graph.nodes;\n    const edges = this.state.graph.edges;\n    const selected = this.state.selected;\n\n    const NodeTypes = GraphConfig.NodeTypes;\n    const NodeSubtypes = GraphConfig.NodeSubtypes;\n    const EdgeTypes = GraphConfig.EdgeTypes;\n\n    return (\n      <div id='graph' style={styles.graph}>\n\n        <GraphView\n          ref={(el) => this.GraphView = el}\n          nodeKey={NODE_KEY}\n          emptyType={EMPTY_TYPE}\n          nodes={nodes}\n          edges={edges}\n          selected={selected}\n          nodeTypes={NodeTypes}\n          nodeSubtypes={NodeSubtypes}\n          edgeTypes={EdgeTypes}\n          enableFocus={true}\n          getViewNode={this.getViewNode}\n          onSelectNode={this.onSelectNode}\n          onCreateNode={this.onCreateNode}\n          onUpdateNode={this.onUpdateNode}\n          onDeleteNode={this.onDeleteNode}\n          onSelectEdge={this.onSelectEdge}\n          onCreateEdge={this.onCreateEdge}\n          onSwapEdge={this.onSwapEdge}\n          onDeleteEdge={this.onDeleteEdge}/>\n      </div>\n    );\n  }\n\n}\n\n// To bootstrap this example into the Document\nclass App extends Component {\n  render() {\n    return <Graph/>\n  }\n}\nif (typeof window !== 'undefined') {\n  window.onload = function() {\n    ReactDOM.render(<App/>, document.getElementById('content'))\n  }\n}\n"]}